-------------------------------------------------------------------------------------------------------------------------------------------------
            MEARN STACK INTERVIOEW
-------------------------------------------------------------------------------------------------------------------------------------------------


The MERN stack is a full-stack JavaScript framework used for building dynamic web applications. It consists of four main parts i.e. MongoDB, Express, ReactJS, and NodeJS.

MongoDB: It is a cross-platform document-oriented database.MongoDB is a NoSQL database that stores data in a JSON-like format.
ExpressJS: It is a NodeJS Web framework.ExpressJS is a minimalist web application framework for NodeJS
ReactJS: It is a Client-side JavaScript Framework. React is a JavaScript library for building user interfaces. React allows users
         to create reusable UI components 
         Its component-based architecture and virtual DOM make it ideal for building interactive and responsive web applications.
NodeJS: It is a JavaScript Runtime Environment.. It allows users to run JavaScript code on the server


Is MERN a full-stack solution ?
Yes, the MERN stack is indeed a full-stack solution. It encompasses all the essential components needed to develop
 a web application, including the frontend, backend, and database layers.

Frontend (Client-side): ReactJS is used to build the user interface (UI) of the application. It enables users to create interactive
                      and dynamic user interfaces with reusable components.
Backend (Server-side): NodeJS with ExpressJS is employed to build the server-side logic of the application.
                      It handles tasks such as routing, middleware management, and interfacing with the database.
Database: MongoDB serves as the database layer of the application, providing a flexible and scalable solution for storing and retrieving data.



-------------------------------------------------------------------------------------------------------------------------------------------------
                   JS continue.........................
-------------------------------------------------------------------------------------------------------------------------------------------------

 16.javascript modules : used to share data from one file to another ,can be used in 3 types :
     
      -export statements :
           -export default keyword : this keyword must be at th end of the file
                                        export default App =  then import as =   import App from './App.jsx'
           -export keyword : used to export multiple data from a single js file
                                        import as=  import { createRoot } from 'react-dom/client'


      -import statements : used to use the eport data from another js file
         -import with curly braces : if data exported  using


-------------------------------------------------------------------------------------------------------------------------------------------------
                    React -advanced frontend application library
-------------------------------------------------------------------------------------------------------------------------------------------------

1.Basic React
     
      -React app is a collection of different libraries
      -React app consist of different "Components".which is used to display contents in browser,in React app,
       all Components are arranged in a tree structure.tree structure has a single parent/root node which is
       by default known as  "App Component ".Components are reusable
    -Pure Js functions to build Components,it return how to display contents in browser.
     pure functions are capable of doing  only one task with the help of its arguments.functions without side effects

      -Declarative Approach 
      -Virtual DOM : light weight memory representation of real DOM.reendering single element
      -Babel library : used to ddisplay contents into browser.
      -JSX(javascript XML): js extension for writing HTML code in javascript.
        eg:const var = <h2>company</h2>
          

          -every JSX element must be inside a single tag .parent tag can be any container tag (div,section,article)
           or React fragments(<> </>) tag without name is known as react fragments
          -every jsx ode should have closing tag.
             -tags with content :<starting tag> content </closing tag>
             -tags without content : <starting tag> </closing tag> / self closing tags : <startingtag/>
          -instead of attribute "class" use "className" in JSX
          -instead of attribute "for" use "htmlFor" in JSX
          -in JSX we have to use "camelCase" to write elements / content :
             eg:fontWeight,onClick
          -in JSX, we can directly pass js code inside a curly brsaces,
            eg:{jscode}

 2.React App Creation
    -CRA(using create-react-app command)
    -Vite: tool for building web application
       -installing vite globaly : npm i -g create-vite
       -react app creation using vite : npm create vite@latest reactName -- --template react



 3. files and folders of react app using vite
       
        -package.json file : npm configuration file for the project
        -package-lock.json file : used to hold version of dependent package of the project
        -node modules : used to locally store dependent packages of project,we can generate  node_modules folder with the help of command 
                         npm install
        -public folder  : used to hold data that can be accessed by any part of the project 
        -index.html file :  which is the entry point of react application, react app  will display in  index.html file
        -src folder : logic of react app is defined here.
          // render : display content in browser.is a method
          //  strict mode: predifined function used for double checking.it has only one content "app" and it is a component.it has self tag
 
             -main.jsx : define the logic to render (displaying in browser) react app in html element with id as "root"
                  -createRoot() createRoot let you create a root to display react components inside a browserDOM node.
                  -css file : used for styling
                  -app.jsx :  used to create react root component
                  -asset folder : used to hold media files used in react project
 


 4.Components : part of user interface .used to display content in browser ,to create a component,
                create a js/jsx file with fileName starts with capital letter
    

     -creating components in 2 ways :
          -function based components / stateless components : uses js pure functions to build components ,function name must similar
                                       to its file name. function return jsx code(is not possible to create state so use class components)

          -Class components / statefull components : uses class to create components.class inherits react component  class.
                                                      render method in class used to return jsx .
                                                       

                                - to create state : it has to call super method in its constructor to get its parent 
                                                     features.state is an object,where we can store value as key-value pairs , to update 
                                                     the state use a predefined method setState() we have to pass its argument as updated value
                                                     of state
              - Life Cycle Of React Components:

                     - Mounting Phase : putting jsx into dom

                             - constructor () : used for defining variable
                             - getDerivedStateFromProps(): to get data from parent
                             - render() : to display content 
                             - componentDidMount() :  ending state to know


                     - updating phase : when a component get updated

                        - getDerivedStateFromProps(): to get data from parent
                        - getSnapshotBeforeUpdate():  take snapshot when entered to updatingphase
                        - shouldComponentUpdate() : check is component is updated
                        - render()
                        - componentDidUpdate() :  ending of update state

                     - unmounting phase : removing component from dom

                         -componentWillUnmount(): delete the component


               class components                                                                  function bsased component
      ------------------------------------------------------------------------------------------------------------------------------------------
      1.using class to create components,render method                                      1.using pure js functions and return jsx
         must return jsx
      2. statefull components                                                                2. stateless components
      3. hooks are not used                                                                 3.hooks are used  
      4.need constructor to initialize state                                                 4. no need of constructor
      5. life cycle methods are available                                                     5.life cycle methods are not available
          eg: render                                                          
 
 
 
 
 5. Data sharing between React component                                                  


     -data can be shared from parent to child :  using "props"

 6. props : it is an property of an component ,it is an object, used to transfer data from parent component to child component.
            parent data can be shared via child tag attribute.to access data  parent data in child we have props .props used in 
            the child component function argument.

 7. Conditional Rendering : used based on condition rendering jsx elements in browser ,using if-else statements(ternary operator?:)
                            if statements (&& truthy operator)


 8.List in React : use map array method.   set a key attribute to duplicating jsx element in a list

  9. CSS styling in React : Different  Ways to apply css to jsx elements 
       -Inline Css : using style attribute to apply style to jsx element ,style must be
                     as an object 
                         -syntax: style ={{cssProperty:value,...........}}

      -external css : Define css style in an externa; css file. Link css file to component file using import statements.
      we cannot import css file to a variable in componnt file

         -import "css file path"
         -using css module files : file extension should be  ".module.css" this type of file is "module file" in this we have to 
                                   define style in class.to use module css file we have to import it to a componenet file
             -import variableName from "moduleFile path" ,to apply style in component ,use "variable.className"


  -important css styling component libraries
     -material ui
10. Event handling in React  :  
             -syntax : - Event={functionCall}
  two types:-
      -Binding function without Arguments :
                   -syntax : - event = {functionName}
     
      -Binding function with arguments : 
                  -syntax : - event = { ()=>functionName(arguments)}
                    
    -Binding function with arguments as events : 
                  -syntax : - event = { (event)=>functionName(event)}

11.  State in React :(in  variable rerender is not possib;e so use state) used to store data of  a component when state value changes,
                    the component  will rerender( used to store data).it can created only by class components


12. Hooks in React : predefined methods in react is known as Hooks,used to provide react component features to functional components
                     to use a hook in a functional component it has to call  the hook

        -Rules to call hooks in functional component
               - import hook in functional component
               - to use hook in component call the hook in top level of component
               - hooks cannot be conditional (dont use hook inside conditional statement)
         - Based on react features there are different types of hooks available
           -Build in Hooks:-
                         - useState() : used to crate state in functional components.this hook will return an array of 2 arguments
                          1st argument : state , 2nd argument :function used to update state
                         - useEffect(callbackfunction,dependencies) : used to apply sideeffects of the functional components.
                                                                     we can pass sideeffects in its first argument and a callback function.  
                                                                     we can also pass an optional dependencies argument to decide when to
                                                                      apply side effects in component


                                    -dependency different values:
                                         -no value :sideeffects will apply to the component all the time, which leads to an infinite loop

                                         - empty arry : sideeffects will apply to the component only at the time of loading the componenent in DOM

                                         -[state/props/variable_Namr]: sideeffects will apply to the component only at the time of loading the 
                                                                      componenet in DOM but also whenever the value of state/props/variable_Name 
                                                                      given  in the dependencies changes


                         - useRef(initial value): is a react hook that lets you reference a value that not needed for rendering.initialvalue is
                                                   optional  in useRef hook.it return an object and acces values by using cuurent key .also used to 
                                                   acces elements eg:focus input tag


           -custom hooks:-its not predefinred.we have to create a js file to define a specific function for a special task.export the function from 
                          that file .file name must start with 'use' keyword

13. Form Handling In React : There are two  Ways to manage data inside the form by a component.
    
    - Controlled Components : There are components which store form data inside its own state

    - UnControlled Components : Component who access form data using its DOM elements reference



